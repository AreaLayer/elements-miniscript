// Miniscript
// Written in 2019 by
//     Andrew Poelstra <apoelstra@wpsoftware.net>
//
// To the extent possible under law, the author(s) have dedicated all
// copyright and related and neighboring rights to this software to
// the public domain worldwide. This software is distributed without
// any warranty.
//
// You should have received a copy of the CC0 Public Domain Dedication
// along with this software.
// If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.
//

//! Example: Verifying a signed transaction

extern crate bitcoin;
extern crate elements;
extern crate elements_miniscript as miniscript;

use elements::confidential;
use elements::encode::Decodable;
use elements::secp256k1_zkp; // secp256k1 re-exported from rust-bitcoin
use std::str::FromStr;
fn main() {
    // some random liquid tx from mempool(Dec 3rd 2020)
    // txid: f23c8973027aa8c1e86580a729833914f5b1fa710367db07f1f5515aa3729f16
    let tx_bytes : Vec<u8> = elements::hashes::hex::FromHex::from_hex(
            ""
        ).unwrap();
    let transaction =
        elements::Transaction::consensus_decode(&mut &tx_bytes[..]).expect("decode transaction");

    let spk_input_1 = elements::Script::from(vec![
        0xa9, 0x14, 0x10, 0xc4, 0x65, 0x2c, 0x0d, 0x2d, 0xf7, 0xaf, 0xaa, 0xaf, 0x82, 0x0e, 0x48,
        0x9c, 0xb2, 0x7f, 0xae, 0x60, 0xd4, 0x86, 0x87,
    ]);

    let mut interpreter = miniscript::Interpreter::from_txdata(
        &spk_input_1,
        &transaction.input[0].script_sig,
        &transaction.input[0].witness.script_witness,
        0,
        0,
    )
    .unwrap();

    let desc_string = interpreter.inferred_descriptor_string();
    println!("Descriptor: {}", desc_string);
    miniscript::Descriptor::<bitcoin::PublicKey>::from_str(&desc_string)
        .expect("this descriptor can be reparsed with sanity checks passing");
    interpreter
        .inferred_descriptor()
        .expect("we can use this method to do the above from_str for us");

    // 1. Example one: learn which keys were used, not bothering
    //    to verify the signatures (trusting that if they're on
    //    the blockchain, standardness would've required they be
    //    either valid or 0-length.
    println!("\nExample one");
    for elem in interpreter.iter(|_, _| true) {
        // Don't bother checking signatures
        match elem.expect("no evaluation error") {
            miniscript::interpreter::SatisfiedConstraint::PublicKey { key, sig } => {
                println!("Signed with {}: {}", key, sig);
            }
            _ => {}
        }
    }

    // 2. Example two: verify the signatures to ensure that invalid
    //    signatures are not treated as having participated in the script
    let secp = secp256k1_zkp::Secp256k1::new();
    // Sometimes it is necessary to have additional information to get the bitcoin::PublicKey
    // from the MiniscriptKey which can supplied by `to_pk_ctx` parameter. For example,
    // when calculating the script pubkey of a descriptor with xpubs, the secp context and
    // child information maybe required.
    let mut interpreter = miniscript::Interpreter::from_txdata(
        &spk_input_1,
        &transaction.input[0].script_sig,
        &transaction.input[0].witness.script_witness,
        0,
        0,
    )
    .unwrap();

    // Get the previous confidential amount
    let conf_val: Vec<u8> = elements::hashes::hex::FromHex::from_hex(
        "080e8899a3c271573359a179b27b59af180b36461f959ee00f762d9c2d84192a06",
    )
    .unwrap();

    let amount = confidential::Value::from_commitment(&conf_val).unwrap();
    let vfyfn = interpreter.sighash_verify(&secp, &transaction, 0, amount);
    // Restrict to sighash_all just to demonstrate how to add additional filters
    // `&_` needed here because of https://github.com/rust-lang/rust/issues/79187
    let vfyfn = move |pk: &_, bitcoinsig: miniscript::ElementsSig| {
        bitcoinsig.1 == elements::SigHashType::All && vfyfn(pk, bitcoinsig)
    };

    println!("\nExample two");
    for elem in interpreter.iter(vfyfn) {
        match elem.expect("no evaluation error") {
            miniscript::interpreter::SatisfiedConstraint::PublicKey { key, sig } => {
                println!("Signed with {}: {}", key, sig);
            }
            _ => {}
        }
    }

    // 3. Example three: same, but with the wrong signature hash, to demonstrate
    //    what happens given an apparently invalid script
    let secp = secp256k1_zkp::Secp256k1::new();
    let message = secp256k1_zkp::Message::from_slice(&[0x01; 32][..]).expect("32-byte hash");

    let mut interpreter = miniscript::Interpreter::from_txdata(
        &spk_input_1,
        &transaction.input[0].script_sig,
        &transaction.input[0].witness.script_witness,
        0,
        0,
    )
    .unwrap();

    let iter = interpreter.iter(|pk, (sig, sighashtype)| {
        sighashtype == elements::SigHashType::All && secp.verify(&message, &sig, &pk.key).is_ok()
    });
    println!("\nExample three");
    for elem in iter {
        let error = elem.expect_err("evaluation error");
        println!("Evaluation error: {}", error);
    }
}
